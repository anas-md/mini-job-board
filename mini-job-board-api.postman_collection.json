{
  "info": {
    "name": "Mini Job Board API",
    "description": "Complete API testing collection for Mini Job Board application",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Set token in Authorization header if available",
          "if (pm.collectionVariables.get('token')) {",
          "    pm.request.headers.add({",
          "        key: 'Authorization',",
          "        value: 'Bearer ' + pm.collectionVariables.get('token')",
          "    });",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "token",
      "value": "",
      "type": "string"
    },
    {
      "key": "employer_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "applicant_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "job_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "application_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "application_test_job_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "employer_email",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register Employer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('user');",
                  "    pm.expect(responseJson.data).to.have.property('token');",
                  "    pm.expect(responseJson.data.user).to.have.property('role', 'employer');",
                  "});",
                  "",
                  "pm.test('Save employer token and email', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.token) {",
                  "        pm.collectionVariables.set('employer_token', responseJson.data.token);",
                  "        pm.collectionVariables.set('token', responseJson.data.token);",
                  "    }",
                  "    if (responseJson.data && responseJson.data.user && responseJson.data.user.email) {",
                  "        pm.collectionVariables.set('employer_email', responseJson.data.user.email);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Employer\",\n  \"email\": \"employer{{$timestamp}}@test.com\",\n  \"password\": \"password\",\n  \"password_confirmation\": \"password\",\n  \"role\": \"employer\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Register Applicant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('user');",
                  "    pm.expect(responseJson.data).to.have.property('token');",
                  "    pm.expect(responseJson.data.user).to.have.property('role', 'applicant');",
                  "});",
                  "",
                  "pm.test('Save applicant token', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.token) {",
                  "        pm.collectionVariables.set('applicant_token', responseJson.data.token);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Applicant\",\n  \"email\": \"applicant{{$timestamp}}@test.com\",\n  \"password\": \"password\",\n  \"password_confirmation\": \"password\",\n  \"role\": \"applicant\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('user');",
                  "    pm.expect(responseJson.data).to.have.property('token');",
                  "    pm.expect(responseJson.data.user).to.have.property('id');",
                  "});",
                  "",
                  "pm.test('Save auth token', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.token) {",
                  "        pm.collectionVariables.set('token', responseJson.data.token);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{employer_email}}\",\n  \"password\": \"password\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('name');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "    pm.expect(responseJson.data).to.have.property('role');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/user",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "user"]
            }
          }
        }
      ]
    },
    {
      "name": "Jobs",
      "item": [
        {
          "name": "Get All Jobs (Public)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson).to.have.property('meta');",
                  "    pm.expect(responseJson.meta).to.have.property('current_page');",
                  "    pm.expect(responseJson.meta).to.have.property('total');",
                  "});",
                  "",
                  "pm.test('Jobs have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.length > 0) {",
                  "        const job = responseJson.data[0];",
                  "        pm.expect(job).to.have.property('id');",
                  "        pm.expect(job).to.have.property('title');",
                  "        pm.expect(job).to.have.property('description');",
                  "        pm.expect(job).to.have.property('location');",
                  "        pm.expect(job).to.have.property('salary_range');",
                  "        pm.expect(job).to.have.property('is_remote');",
                  "        pm.expect(job).to.have.property('status');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/jobs?page=1&location=remote&search=developer",
              "host": ["{{base_url}}"],
              "path": ["api", "jobs"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "location",
                  "value": "remote"
                },
                {
                  "key": "search",
                  "value": "developer"
                }
              ]
            }
          }
        },
        {
          "name": "Create Job (Employer)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Job created successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('title');",
                  "});",
                  "",
                  "pm.test('Save job ID for future tests', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.id) {",
                  "        pm.collectionVariables.set('job_id', responseJson.data.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Senior Laravel Developer\",\n  \"description\": \"We are looking for an experienced Laravel developer...\",\n  \"location\": \"New York, NY\",\n  \"salary_range\": \"$80,000 - $120,000\",\n  \"is_remote\": false,\n  \"status\": \"published\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/jobs",
              "host": ["{{base_url}}"],
              "path": ["api", "jobs"]
            }
          }
        },
        {
          "name": "Get Job Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Job has all required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    const job = responseJson.data;",
                  "    pm.expect(job).to.have.property('id');",
                  "    pm.expect(job).to.have.property('title');",
                  "    pm.expect(job).to.have.property('description');",
                  "    pm.expect(job).to.have.property('location');",
                  "    pm.expect(job).to.have.property('salary_range');",
                  "    pm.expect(job).to.have.property('is_remote');",
                  "    pm.expect(job).to.have.property('status');",
                  "    pm.expect(job).to.have.property('user');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/jobs/{{job_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "jobs", "{{job_id}}"]
            }
          }
        },
        {
          "name": "Update Job (Employer)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Job updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('title');",
                  "    pm.expect(responseJson.data.title).to.include('Updated');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Senior Laravel Developer (Updated)\",\n  \"description\": \"Updated job description...\",\n  \"location\": \"New York, NY\",\n  \"salary_range\": \"$90,000 - $130,000\",\n  \"is_remote\": true,\n  \"status\": \"published\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/jobs/{{job_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "jobs", "{{job_id}}"]
            }
          }
        },
        {
          "name": "Get My Jobs (Employer)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains employer jobs', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(Array.isArray(responseJson.data)).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/my-jobs",
              "host": ["{{base_url}}"],
              "path": ["api", "my-jobs"]
            }
          }
        },
        {
          "name": "Create Application Test Job (Employer)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Application test job created', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('title');",
                  "});",
                  "",
                  "pm.test('Save application test job ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.id) {",
                  "        pm.collectionVariables.set('application_test_job_id', responseJson.data.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employer_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Application Test Job\",\n  \"description\": \"This job is created specifically for testing applications...\",\n  \"location\": \"Remote\",\n  \"salary_range\": \"$60,000 - $80,000\",\n  \"is_remote\": true,\n  \"status\": \"published\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/jobs",
              "host": ["{{base_url}}"],
              "path": ["api", "jobs"]
            }
          }
        }
      ]
    },
    {
      "name": "Applications",
      "item": [
        {
          "name": "Apply to Job (Applicant)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Application created successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('message');",
                  "    pm.expect(responseJson.data).to.have.property('job_id');",
                  "    pm.expect(responseJson.data).to.have.property('user_id');",
                  "});",
                  "",
                  "pm.test('Save application ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.id) {",
                  "        pm.collectionVariables.set('application_id', responseJson.data.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{applicant_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"I am very interested in this position and believe my skills would be a great fit...\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/jobs/{{application_test_job_id}}/apply",
              "host": ["{{base_url}}"],
              "path": ["api", "jobs", "{{application_test_job_id}}", "apply"]
            }
          }
        },
        {
          "name": "Get My Applications (Applicant)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains applications', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(Array.isArray(responseJson.data)).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{applicant_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/my-applications",
              "host": ["{{base_url}}"],
              "path": ["api", "my-applications"]
            }
          }
        },
        {
          "name": "Get Job Applications (Employer)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains job applications', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(Array.isArray(responseJson.data)).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employer_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/jobs/{{application_test_job_id}}/applications",
              "host": ["{{base_url}}"],
              "path": ["api", "jobs", "{{application_test_job_id}}", "applications"]
            }
          }
        },
        {
          "name": "Withdraw Application (Applicant)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 204', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});",
                  "",
                  "pm.test('Application withdrawn successfully', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('message');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{applicant_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/applications/{{application_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "applications", "{{application_id}}"]
            }
          }
        },
        {
          "name": "Delete Job (Employer)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 204', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});",
                  "",
                  "pm.test('Job deleted successfully', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('message');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employer_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/jobs/{{job_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "jobs", "{{job_id}}"]
            }
          }
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Clear token after logout', function () {",
                  "    pm.collectionVariables.set('token', '');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "logout"]
            }
          }
        }
      ]
    }
  ]
} 